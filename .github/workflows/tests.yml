name: APICenter Tests

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "*.txt"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "*.txt"
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.0
          virtualenvs-create: true
          virtualenvs-in-project: false
          
      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies and ruff
        run: |
          poetry install --no-interaction
          poetry run pip install ruff
        
      - name: Fix bare except issues
        run: |
          # Fix bare except (E722) issues
          poetry run ruff check --fix --select=E722 apicenter tests
        
      - name: Check for critical linting issues
        run: |
          # Verify only critical issues (ignore formatting and unused imports for now)
          poetry run ruff check --config=pyproject.toml apicenter
          
  test:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.0
          virtualenvs-create: true
          virtualenvs-in-project: false
          
      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          poetry install --no-interaction
          poetry run pip install coverage
        
      - name: Create mock credentials.json for testing
        run: |
          echo '{
            "modes": {
              "text": {
                "providers": {
                  "openai": {
                    "api_key": "test-api-key",
                    "organization": "test-org"
                  },
                  "anthropic": {
                    "api_key": "test-api-key"
                  }
                }
              },
              "image": {
                "providers": {
                  "openai": {
                    "api_key": "test-api-key",
                    "organization": "test-org"
                  },
                  "stability": {
                    "api_key": "test-api-key"
                  }
                }
              },
              "audio": {
                "providers": {
                  "elevenlabs": {
                    "api_key": "test-api-key"
                  }
                }
              }
            }
          }' > credentials.json
        
      - name: Create test runner script that excludes Ollama tests
        run: |
          cat > ci_test_runner.py << 'EOF'
          #!/usr/bin/env python3
          """CI-specific test runner that skips Ollama tests."""
          
          import unittest
          import os
          import sys
          import time
          from pathlib import Path
          
          # Try to import coverage
          try:
              import coverage
              COVERAGE_AVAILABLE = True
          except ImportError:
              COVERAGE_AVAILABLE = False
          
          def print_header(text):
              """Print a nicely formatted header."""
              line = "=" * 70
              print(f"\n{line}\n{text.center(70)}\n{line}")
          
          def run_ci_tests():
              """Run tests with Ollama tests excluded."""
              print_header("Running tests without Ollama")
              
              # Skip tests that require Ollama
              skip_patterns = [
                  "test_ollama_error_handling",
                  "test_call_ollama_with_options",
                  "test_call_ollama_with_system_message"
              ]
              
              # Add parent directory to path
              root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '.'))
              sys.path.insert(0, root_dir)
              
              # Start coverage if available
              if COVERAGE_AVAILABLE:
                  print_header("Running tests with coverage (excluding Ollama)")
                  cov = coverage.Coverage(source=["apicenter"], omit=["*/tests/*"])
                  cov.start()
              
              # Find all test modules
              test_loader = unittest.TestLoader()
              test_suite = test_loader.discover('tests', pattern='test_*.py')
              
              # Filter out Ollama tests
              filtered_suite = unittest.TestSuite()
              for suite in test_suite:
                  for test_case in suite:
                      for test in test_case:
                          if not any(skip in test.id() for skip in skip_patterns):
                              filtered_suite.addTest(test)
              
              # Track execution time
              start_time = time.time()
              
              # Run the filtered tests
              runner = unittest.TextTestRunner(verbosity=2)
              result = runner.run(filtered_suite)
              
              # Print execution time
              total_time = time.time() - start_time
              print(f"\nRan {result.testsRun} tests in {total_time:.3f}s")
              
              # Generate coverage report if available
              if COVERAGE_AVAILABLE:
                  print_header("Coverage Report")
                  cov.stop()
                  cov.report()
                  
                  # Generate HTML report
                  html_dir = os.path.join('tests', 'coverage_html')
                  Path(html_dir).mkdir(exist_ok=True, parents=True)
                  cov.html_report(directory=html_dir)
                  print(f"\nHTML coverage report generated in {html_dir}")
              
              # Show test results summary
              status = "PASSED" if result.wasSuccessful() else "FAILED"
              print_header(f"Test Results: {status}")
              if not result.wasSuccessful():
                  print(f"Errors: {len(result.errors)}")
                  print(f"Failures: {len(result.failures)}")
              
              # Return appropriate exit code
              return 0 if result.wasSuccessful() else 1
          
          if __name__ == "__main__":
              sys.exit(run_ci_tests())
          EOF
          
          chmod +x ci_test_runner.py
        
      - name: Run tests with coverage (excluding Ollama tests)
        run: |
          # Run custom test script that excludes Ollama tests
          poetry run python ci_test_runner.py
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          files: .coverage
          verbose: true
          
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-report
          path: tests/coverage_html/
          retention-days: 7 